 /*
  Device: UPRIGHT Furniture Monitoring System
  
  Creators: Aura Teasley, Brandon Tiner, Levi Newton
  
  Purpose: Alarm System using Thingspeak cloud to communicate motion detected
  from ESP32 SparkFun Thing to thingspeak cloud to be picked up by another device.
  User is allowed to input network name, network password, channel ID, channel Write Key
  through serial monitor rather than hardcoded.
  
  Hardware: ESP32 based boards
  
  ThingSpeak.h provided by MathWorks, INC
  Copyright 2018, The MathWorks, Inc.

  ISSUES NOTICED:
  Wifi connection issues, even when valid when microcontroller is in breadboard, possible issues with minute charges
  Develop case for different network types
*/


#include "ThingSpeak.h"
#include <WiFi.h>

//strings
String ssidString;            //network name
String passString;            //network password
String myChannelNumberString; //channel number
String myWriteAPIKeyString;   //channel write key

//temp variables
String compareString  = ""; 
int compareInt = 0;

//variables needed for functions
unsigned long myChannelNumberInt; 
char ssid[] = "";
char pass[] = "";
char myWriteAPIKey[17];
const char* myWriteAPIKeyPointer = myWriteAPIKey;
const char* hopefulPointer = myWriteAPIKeyPointer;

int number = 0;
int i = 0;
int j = 0;

WiFiClient  client;

void setup() {
  Serial.begin(115200);  //Initialize serial
  WiFi.mode(WIFI_STA);   
  ThingSpeak.begin(client);  // Initialize ThingSpeak

  Serial.println("Program will wait until network name is provided...");
  Serial.print("Network Name: ");
  
  //Program will wait until network name is provided
  while(compareString == "")
  {
    //importing network name
    ssidString = Serial.readString();
    compareString = ssidString;
    }
  
  Serial.print(ssidString);                                       //SANITY CHECK
  char ssid[ssidString.length()-1];
  for(int i = 0; i < ssidString.length()-1; i++)
  {
    ssid[i] = ssidString.charAt(i);
    }

  Serial.println("Program will wait until network password is provided...");
  Serial.print("Network Password: ");
  //Program will wait until 
  while(compareString == ssidString or compareString == "")
  {
    //importing network password
    passString = Serial.readString();
    compareString = passString;
    }
    
  Serial.println(passString);                                   //SANITY CHECK
  
  char pass[passString.length()-1];
  for(int i = 0; i < passString.length()-1; i++)
  {
    pass[i] = passString.charAt(i);
    //Serial.println(pass[i]);
    }

  //Connection to WiFi
  if(WiFi.status() != WL_CONNECTED){
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(ssidString);
    while(WiFi.status() != WL_CONNECTED){
      WiFi.begin(ssid, pass); // Connect to WPA/WPA2 network. Change this line if using open or WEP network
      Serial.print(".");
      delay(5000);     
    } 
    Serial.println("\nConnected.");
  }

  Serial.println("Program will wait until Channel ID is provided...");
  Serial.print("Channel ID: ");
  
  //Program will wait until channel id is provided
  while(compareInt == 0)
  {
    myChannelNumberString = Serial.readString();
    myChannelNumberInt = myChannelNumberString.toInt();
    compareInt = myChannelNumberInt;
    }

  Serial.println(myChannelNumberInt);                           //SANITY CHECK

  Serial.println("Program will wait until Write API Key is provided...");
  Serial.print("My Write API Key: ");
  //Acquring Write Key
  while(compareString == passString or compareString == "")
  {
    myWriteAPIKeyString = Serial.readString();
    compareString = myWriteAPIKeyString;
    }

  for(int i = 0; i < 17; i++)
  {
    myWriteAPIKey[i] = myWriteAPIKeyString.charAt(i);
    }
  Serial.println(myWriteAPIKeyPointer);
  
}

void loop() {

  // Write to ThingSpeak. There are up to 8 fields in a channel, allowing you to store up to 8 different
  // pieces of information in a channel.  Here, we write to field 1.
  int x = ThingSpeak.writeField(myChannelNumberInt, 1, number, myWriteAPIKeyPointer);
  if(x == 200){
    Serial.println("Channel update successful.");
  }
  else{
    Serial.println("Problem updating channel. HTTP error code " + String(x));
  }
  
  delay(20000); // Wait 20 seconds to update the channel again
  
  //For DEMO, will change to after control system is installed
  if(number == 1)
    number = 0;
  else
    number = 1;
}
