/*
  Contributors: Aura Teasley, Brandon Tiner and Levi Newton
  
  Purpose: Alarm System using Thingspeak cloud to communicate motion detected
  from ESP32 SparkFun Thing to thingspeak cloud to be picked up by another device.
  User is allowed to input network name, network password, channel ID, channel Write Key
  through serial monitor rather than hardcoded.
  
  Hardware: ESP32 based boards
  
  ThingSpeak.h provided by MathWorks, INC
  Copyright 2018, The MathWorks, Inc.

  ISSUES NOTICED:
  Wifi connection issues, even when valid when microcontroller is in breadboard, possible issues with minute charges
  Develop case for different network types
*/


#include "ThingSpeak.h"
#include <WiFi.h>

//strings
String ssidString;            //network name
String passString;            //network password
String myChannelNumberString; //channel number
String myWriteAPIKeyString;   //channel write key

//temp variables
String compareString  = ""; 
int compareInt = 0;

//variables needed for functions
unsigned long myChannelNumberInt; 
char ssid[] = "";
char pass[] = "";
char myWriteAPIKey[17];
const char* myWriteAPIKeyPointer = myWriteAPIKey;
const char* hopefulPointer = myWriteAPIKeyPointer;

int number = 0;
int i = 0;
int j = 0;

//Make trial for networks that don't require passwords

WiFiClient  client;

void setup() {
  Serial.begin(115200);  //Initialize serial
  WiFi.mode(WIFI_STA);   
  ThingSpeak.begin(client);  // Initialize ThingSpeak
  
  //if you haven't input a number yet...wait
  while(compareString == "")
  {
    //importing network name
    ssidString = Serial.readString();
    compareString = ssidString;
    }

  //Serial.print("Input string is (Network name): ");               //SANITY CHECK
  //Serial.println(ssidString);                                     //SANITY CHECK
  
  char ssid[ssidString.length()-1];
  for(int i = 0; i < ssidString.length()-1; i++)
  {
    ssid[i] = ssidString.charAt(i);                              //SANITY CHECK
    Serial.println(ssid[i]);
    }
  Serial.print("ssid is: ");
  Serial.println(ssid);
  Serial.print("The length of ssid[] is: ");
  Serial.println(sizeof(ssid));
  
  //if next string read is still the same...wait
  while(compareString == ssidString or compareString == "")
  {
    //importing network password
    passString = Serial.readString();
    compareString = passString;
    }
    
  Serial.print("Input string is (Network password): ");         //SANITY CHECK
  Serial.println(passString);                                   //SANITY CHECK
  char pass[passString.length()-1];
  for(int i = 0; i < passString.length()-1; i++)
  {
    pass[i] = passString.charAt(i);
    Serial.println(pass[i]);
    }
  
  Serial.print("pass is: ");
  Serial.println(pass);
  Serial.print("The length of pass[] is: ");
  Serial.println(sizeof(pass));

  //now issue with wifi not engaging
    // Connect or reconnect to WiFi
  if(WiFi.status() != WL_CONNECTED){
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(ssidString);
    while(WiFi.status() != WL_CONNECTED){
      WiFi.begin(ssid, pass); // Connect to WPA/WPA2 network. Change this line if using open or WEP network
      Serial.print(".");
      delay(5000);     
    } 
    Serial.println("\nConnected.");
  }
  
  //if next string read is still the same
  while(compareInt == 0)
  {
    myChannelNumberString = Serial.readString();
    myChannelNumberInt = myChannelNumberString.toInt();
    compareInt = myChannelNumberInt;
    }

  Serial.print("Input string is (Channel Number): ");           //SANITY CHECK
  Serial.println(myChannelNumberString);                        //SANITY CHECK

  Serial.println(myChannelNumberInt);                           //SANITY CHECK

  //Acquring Write Key
  while(compareString == passString or compareString == "")
  {
    myWriteAPIKeyString = Serial.readString();
    compareString = myWriteAPIKeyString;
    }

  Serial.print("Input string is (Write Key): ");                //SANITY CHECK
  Serial.println(myWriteAPIKeyString);                          //SANITY CHECK
  for(int i = 0; i < 17; i++)
  {
    myWriteAPIKey[i] = myWriteAPIKeyString.charAt(i);
    }

  j = 0;
  Serial.println("Printing myWriteAPIKey Pointer: ");
  Serial.println(myWriteAPIKeyPointer);
  Serial.println("Printinng hopeful pointer contents: ");
  while(j < 17)
  {
   Serial.print(j+1);                                           //SANITY CHECK
   Serial.print(".) ");                                         //SANITY CHECK
   Serial.println(hopefulPointer);                              //SANITY CHECK
   hopefulPointer++;                                            //SANITY CHECK
   j++;                                                         //SANITY CHECK  
  }
}

void loop() {

  // Write to ThingSpeak. There are up to 8 fields in a channel, allowing you to store up to 8 different
  // pieces of information in a channel.  Here, we write to field 1.
  //int x = ThingSpeak.writeField(myChannelNumberInt, 1, number, myWriteAPIKey);
  int x = ThingSpeak.writeField(myChannelNumberInt, 1, number, myWriteAPIKeyPointer);
  if(x == 200){
    Serial.println("Channel update successful.");
  }
  else{
    Serial.println("Problem updating channel. HTTP error code " + String(x));
  }
  
  delay(20000); // Wait 20 seconds to update the channel again
  if(number == 1)
    number = 0;
  else
    number = 1;
}
